import{F as o}from"./index-TH8YGKRz.js";const n="http://localhost:3000",w=async()=>{const s=await o(`${n}/api/users/me`);if(!s.ok)throw new Error("Failed to fetch user profile");const a=(await s.json()).data.user.workspaceId;if(!a)throw new Error("User is not assigned to any workspace");const e=await o(`${n}/api/workspaces/${a}`);if(!e.ok){const i=await e.json();throw new Error(i.message||"Failed to fetch workspace details")}return(await e.json()).data.workspace},m=async(s,t)=>{const a=await o(`${n}/api/workspaces/${s}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!a.ok){const r=await a.json();throw new Error(r.message||"Failed to update workspace")}return(await a.json()).data.workspace},d=async(s,t={})=>{const a=new URLSearchParams;if(t.search&&a.append("search",t.search),t.status){const r=t.status.toUpperCase();a.append("status",r)}if(t.role){const r=t.role.toUpperCase(),i=r==="MEMBERS"?"MEMBER":r;a.append("role",i)}t.page&&a.append("page",t.page.toString()),t.limit&&a.append("limit",t.limit.toString());const e=await o(`${n}/api/workspaces/${s}/members?${a.toString()}`);if(!e.ok){const r=await e.json();throw new Error(r.message||"Failed to fetch workspace members")}return await e.json()},l=async(s,t,a)=>{const e=await o(`${n}/api/workspaces/${s}/members/${t}/status`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({status:a})});if(!e.ok){let r="Failed to change member status";try{r=(await e.json()).message||r}catch{r=e.statusText||r}throw e.status===500&&r.includes("Cannot deactivate the only admin")?new Error("Cannot deactivate the only admin in the workspace. At least one admin must remain active."):e.status===500&&r.includes("Cannot deactivate admin")?new Error("Cannot deactivate an admin. Please change their role to Member first."):new Error(r)}return await e.json()},p=async(s,t,a)=>{const e=await o(`${n}/api/workspaces/${s}/members/${t}/role`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({role:a})});if(!e.ok){let r="Failed to change member role";try{r=(await e.json()).message||r}catch{r=e.statusText||r}throw e.status===500&&r.includes("Cannot demote the only admin")?new Error("Cannot demote the only admin in the workspace. At least one admin must remain."):new Error(r)}return await e.json()},h=async(s,t)=>{const a=await o(`${n}/api/workspaces/${s}/members/${t}`,{method:"DELETE"});if(!a.ok){let e="Failed to remove member";try{e=(await a.json()).message||e}catch{e=a.statusText||e}throw a.status===400&&e.includes("Cannot remove the only admin")?new Error("Cannot remove the only admin from the workspace. At least one admin must remain."):a.status===400&&e.includes("Cannot remove yourself")?new Error("You cannot remove yourself from the workspace. Please have another admin remove you."):new Error(e)}return await a.json()},u=async(s,t)=>{const a=await o(`${n}/api/workspaces/${s}/members/${t}/permanent`,{method:"DELETE"});if(!a.ok){let e="Failed to permanently remove member";try{e=(await a.json()).message||e}catch{e=a.statusText||e}throw a.status===400&&e.includes("Cannot remove the only admin")?new Error("Cannot remove the only admin from the workspace. At least one admin must remain."):new Error(e)}return await a.json()},k=async(s,t)=>{const a=await o(`${n}/api/workspaces/${s}/delete`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({reason:t})});if(!a.ok){let e="Failed to request workspace deletion";try{e=(await a.json()).message||e}catch{e=a.statusText||e}throw a.status===400&&e.includes("already been requested")?new Error("Workspace deletion has already been requested. The workspace will be deleted in 30 days."):a.status===403&&e.includes("Only workspace admins")?new Error("Only workspace admins can request workspace deletion."):new Error(e)}return await a.json()};export{d as a,p as b,l as c,u as d,k as e,w as g,h as r,m as u};
